import asyncio
import logging
import os

import aiocron
import openai
import pymongo
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputMediaPhoto, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor
from dotenv import load_dotenv

from UserInteractionHandler.UserInteractionHandler import UserInteractionHandler

load_dotenv()


MONGO_URI = os.getenv("MONGO_URI")
# Configure logging
logging.basicConfig(level=logging.INFO)
openai.api_key = os.getenv("OPENAI_API_KEY")

client = pymongo.MongoClient(MONGO_URI)
db = client["Feedbacks"]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
feedback_collection = db["feedback"]

db1 = client["telegram_bot_db"]  # –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
users_collection = db1["users"]

API_TOKEN = os.getenv("API_TOKEN")
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Define the keyboard layout
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row("–ö–∞—Ä—Ç–∞üó∫Ô∏è", "–†–£–ü –®–ò–¢–∏–òüìö")
main_keyboard.row("–ì–¥–µ –Ø?ü´£", "–ù–∞–π—Ç–∏üîç", "ChatGPTü§ñ")
main_keyboard.row("–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•", "–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨")
# Global dictionary to store user states
USER_STATES = {}
USER_MESSAGE_HISTORY = {}

user_manager = UserInteractionHandler(
    users_collection, feedback_collection, bot, main_keyboard
)


async def ask_openai(question):
    # Using the gpt-3-turbo model for chat-based interaction
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": question},
        ],
        max_tokens=800,
    )

    return response.choices[0].message["content"].strip()


@aiocron.crontab("0 3 * * *")  # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:02
async def send_daily_quote():
    # –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = user_manager.get_all_users()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É —Å –ø–æ–º–æ—â—å—é OpenAI
    prompt = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–∂–µ–ª–∞–π –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–æ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ GUIDeon. –ü–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç –Ω–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤"
    response = await ask_openai(prompt)

    for user_id in users:
        await bot.send_message(user_id, response)


@aiocron.crontab("0 10 * * *")  # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:02
async def send_daily():
    # –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = user_manager.get_all_users()

    for user_id in users:
        await bot.send_message(user_id, "GUIDeon –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –ê–ª—Ç—ã–Ω–∞–π!")


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user_manager.add_user(message.from_user.id)
    first_name = message.from_user.first_name
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! \n\n"
        f"ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ü–µ—Ä–≤–∞—à–∞ –≤ —Å—Ç–µ–Ω–∞—Ö –ö–ë–¢–£. "
        f"–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π OSIT.\n\n"
        f"üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"- –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤—ã –∏–ª–∏ –∂–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        f"- –†–∞–±–æ—á–∏–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –®–ò–¢–∏–ò\n"
        f"- –Æ–∑–∞—Ç—å ChatGPT –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!\n"
        f"- –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –î–µ–∫–∞–Ω–∞—Ç—É –∏–ª–∏ OSIT\n"
    )

    await bot.send_message(
        message.from_user.id, welcome_msg, reply_markup=main_keyboard
    )


@dp.message_handler(lambda message: message.text == "–ö–∞—Ä—Ç–∞üó∫Ô∏è")
async def handle_button1(message: types.Message):
    maps_paths = [
        "./map/1-floor_kbtu.jpg",
        "./map/2-floor_kbtu.jpg",
        "./map/3-floor_kbtu.jpg",
        "./map/4-floor_kbtu.jpg",
        "./map/5-floor_kbtu.jpg",
    ]
    media = [InputMediaPhoto(open(map_path, "rb")) for map_path in maps_paths]

    await bot.send_media_group(message.from_user.id, media)

    for item in media:
        try:
            item.media.close()  # Close the media attribute (assuming it's a file-like object)
        except Exception as e:
            print(f"Error closing media: {e}")


@dp.message_handler(lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ãüí¨")
async def handle_button1(message: types.Message):
    response_text = f"üîí –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å ‚Äì Helpingstudents@kbtu.kz\n\n üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n- –û—Ñ–∏—Å –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: 8 727 357 42 81, d.fazylova@kbtu.kz, officeregistrar@kbtu.kz\n- –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: 8 727 357 42 84 (–≤–Ω. 241), u.bafubaeva@kbtu.kz\n- –û–±—â–µ–∂–∏—Ç–∏–µ: 8 727 357 42 42 (–≤–Ω. 601), m.shopanov@kbtu.kz, a.esimbekova@kbtu.kz\n- –û–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è: 8 727 357 42 58 (–≤–Ω. 163, 169) a.nauruzbaeva@kbtu.kz, m.aitakyn@kbtu.kz\n- –ú–µ–¥. —Ü–µ–Ω—Ç—Ä - medcenter@kbtu.kz\n\nüè´ –î–µ–∫–∞–Ω–∞—Ç—ã:\n- –ë–∏–∑–Ω–µ—Å —à–∫–æ–ª–∞: 8 727 357 42 67 (–≤–Ω. 352, 358), e.mukashev@kbtu.kz, a.yerdebayeva@kbtu.kz\n- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏: 8 727 357 42 71 (–≤–Ω. 383), a.islyami@kbtu.kz, d.bisenbaeva@kbtu.kz\n- –®–∫–æ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏: 8 727 357 42 20, fit_1course@kbtu.kz\n- –®–∫–æ–ª–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: 8 727 357 42 25, a.isakhov@kbtu.kz, n.eren@kbtu.kz\n- –®–∫–æ–ª–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏: 8 727 357 42 42 (–≤–Ω. 324), a.ismailov@kbtu.kz, a.abdukarimov@kbtu.kz\n- –®–∫–æ–ª–∞ –≥–µ–æ–ª–æ–≥–∏–∏: 8 727 357 42 42 (–≤–Ω. 326), a.akhmetzhanov@kbtu.kz, g.ulkhanova@kbtu.kz\n- –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –º–æ—Ä—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è: 8 727 357 42 27 (–≤–Ω. 390, 392), r.biktashev@kbtu.kz, s.dlimbetova@kbtu.kz\n- –®–∫–æ–ª–∞ —Ö–∏–º–∏—á–µ—Å–∫–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏: 8 727 291 57 84, +8 727 357 42 42 (–≤–Ω. 492), k.dzhamansarieva@kbtu.kz, n.saparbaeva@kbtu.kz\n- –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –∏ –Ω–∞–Ω–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: 8 727 357 42 66 (–≤–Ω. 550), n.beisenkhanov@kbtu.kz, z.bugybai@kbtu.kz\n"

    await bot.send_message(message.chat.id, response_text)


@dp.message_handler(lambda message: message.text == "–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•")
async def handle_feedback(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∂–µ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –Ω–µ —Ç–æ–ª—å–∫–æ OSIT –∞ —Ç–∞–∫ –∂–µ –î–µ–∫–∞–Ω–∞—Ç—É –®–ò–¢–∏–ò. –í—Å–µ –ø–∏—Å—å–º–∞ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∏ —á–∏—Ç–∞—Ç—å—Å—è. –£–¥–∞—á–∏!",
    )
    USER_STATES[message.from_user.id] = "feedback"


@dp.message_handler(lambda message: USER_STATES.get(message.from_user.id) == "feedback")
async def feedback(message: types.Message):
    user_manager.save_feedback(message.from_user.id, message.text)
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    USER_STATES[message.from_user.id] = None


@dp.message_handler(lambda message: message.text == "–†–£–ü –®–ò–¢–∏–òüìö")
async def handle_button1(message: types.Message):
    # Define a new keyboard layout for the RUP options
    rup_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    rup_keyboard.row("–í–¢–ò–ü–û", "–ò–°")
    rup_keyboard.row("–ê–ò–£", "–†–ò–ú", "IT management")
    rup_keyboard.add("–ù–∞–∑–∞–¥")

    # Send a message to the user with the new keyboard layout
    await bot.send_message(
        message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –†–£–ü:", reply_markup=rup_keyboard
    )


# Handlers for RUP options
@dp.message_handler(
    lambda message: message.text in ["–í–¢–ò–ü–û", "–ò–°", "–ê–ò–£", "–†–ò–ú", "IT management"]
)
async def handle_rup_options(message: types.Message):
    # Handle the specific RUP option
    # For example:
    if message.text == "–í–¢–ò–ü–û":
        path = "./rup_fit/VTIPO.pdf"
    elif message.text == "–ò–°":
        path = "./rup_fit/IS.pdf"
    elif message.text == "–†–ò–ú":
        path = "./rup_fit/RIM.pdf"
    elif message.text == "–ê–ò–£":
        path = "./rup_fit/AU.pdf"
    elif message.text == "IT management":
        path = "./rup_fit/it_man.pdf"
    with open(path, "rb") as file:
        await bot.send_document(message.from_user.id, file)

    # Return to the main keyboard after handling the RUP option
    await user_manager.send_main_keyboard(message.from_user.id)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_back_button(message: types.Message):
    # Return to the main keyboard
    await user_manager.send_main_keyboard(message.from_user.id)


@dp.message_handler(lambda message: message.text == "–ì–¥–µ –Ø?ü´£")
async def ask_for_room_number(message: types.Message):
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.")
    USER_STATES[message.from_user.id] = "waiting_for_room_number"


@dp.message_handler(
    lambda message: USER_STATES.get(message.from_user.id) == "waiting_for_room_number"
)
async def handle_room_number(message: types.Message):
    found = False
    if message.text.isdigit():
        room_number = int(message.text)
        if 100 <= room_number <= 143:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 1 —ç—Ç–∞–∂.")
            map_path = "./map/floor1/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

        elif 144 <= room_number <= 152:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 1 —ç—Ç–∞–∂.")
            map_path = "./map/floor1/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

        elif 156 <= room_number <= 183:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 1 —ç—Ç–∞–∂.")
            map_path = "./map/floor1/Abl.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 252 <= room_number <= 284:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 2 —ç—Ç–∞–∂.")
            map_path = "./map/floor2/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 202 <= room_number <= 245:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 2 —ç—Ç–∞–∂.")
            map_path = "./map/floor2/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 246 <= room_number <= 251:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 2 —ç—Ç–∞–∂.")
            map_path = "./map/floor2/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 300 <= room_number <= 343:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 3 —ç—Ç–∞–∂.")
            map_path = "./map/floor3/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 344 <= room_number <= 360:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 3 —ç—Ç–∞–∂.")
            map_path = "./map/floor3/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 361 <= room_number <= 388:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 3 —ç—Ç–∞–∂.")
            map_path = "./map/floor3/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 501 <= room_number <= 522:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 5 —ç—Ç–∞–∂.")
            map_path = "./map/5floor.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 400 <= room_number <= 416:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 4 —ç—Ç–∞–∂.")
            map_path = "./map/floor4/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 419 <= room_number <= 438:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –ë–∏, 4 —ç—Ç–∞–∂.")
            map_path = "./map/floor4/KB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 444 <= room_number <= 461:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 4 —ç—Ç–∞–∂.")
            map_path = "./map/floor4/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 462 <= room_number <= 476 or 417 <= room_number <= 418:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –¢–æ–ª–µ –ë–∏, 4 —ç—Ç–∞–∂.")
            map_path = "./map/floor4/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

    if message.text.lower() in [
        "—Ö–∞–ª—ã–∫",
        "—Ö–∞–ª—ã–∫ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
        "–∑–µ–ª–µ–Ω—ã–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
        "halyk co-working",
    ]:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 1 —ç—Ç–∞–∂.")
        map_path = "./map/floor1/KB.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() in [
        "–≥–µ–π–º–¥–µ–≤",
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –Ω–∞ 2 —ç—Ç–∞–∂–µ",
        "game dev",
        "gamedev",
        "726",
    ]:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ.")
        map_path = "./map/floor2/KB.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() in [
        "–æ—Ä",
        "–æ—Ñ–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "office registration",
        "or",
    ]:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 2 —ç—Ç–∞–∂–µ.")
        map_path = "./map/floor2/OR.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() == "—Å—Ç–æ–ª–æ–≤–∫–∞":
        await bot.send_message(message.from_user.id, "–°—Ç–æ–ª–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 1 —ç—Ç–∞–∂–µ.")
        map_path = "./map/floor1/Canteen.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() in [
        "–¥–µ–∫–∞–Ω–∞—Ç —Ñ–∏—Ç",
        "–¥–µ–∫–∞–Ω–∞—Ç —à–∏—Ç–∏–∏",
        "dean site",
        "site",
        "—à–∏—Ç–∏–∏",
        "—Ñ–∏—Ç",
    ]:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 2 —ç—Ç–∞–∂–µ.")
        map_path = "./map/floor2/DCSITE.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True

    if not found:
        await bot.send_message(
            message.from_user.id,
            "–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        )

    # Reset the user state
    USER_STATES[message.from_user.id] = None


find_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
find_keyboard.row("–ö—É—à–∞—Ç—å", "–£—á–∏—Ç—å—Å—è")
find_keyboard.row("–ù–∞–∑–∞–¥")


@dp.message_handler(lambda message: message.text == "–ù–∞–π—Ç–∏üîç")
async def handle_find_room(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n\n–ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –º–µ—Å—Ç–∞ –≥–¥–µ —Ä—è–¥–æ–º –º–æ–∂–Ω–æ –ø–æ–∫—É—à–∞—Ç—å –∏–ª–∏ –∂–µ –ø–æ—É—á–∏—Ç—å—Å—è",
        reply_markup=find_keyboard,
    )
    USER_STATES[message.from_user.id] = "for_room_number"


@dp.message_handler(
    lambda message: USER_STATES.get(message.from_user.id) == "for_room_number"
)
async def handle_room_number(message: types.Message):
    found = False
    if message.text.isdigit():
        room_number = int(message.text)
        if 100 <= room_number <= 143:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 1 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor1/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

        elif 144 <= room_number <= 152:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –¢–æ–ª–µ –±–∏, 1 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor1/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

        elif 156 <= room_number <= 183:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 1 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor1/Abl.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 252 <= room_number <= 284:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 2 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor2/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 202 <= room_number <= 245:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 2 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor2/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 246 <= room_number <= 251:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –¢–æ–ª–µ –ë–∏, 2 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor2/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 501 <= room_number <= 522:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –¢–æ–ª–µ –ë–∏, 5 —ç—Ç–∞–∂."
            )
            map_path = "./map/5floor.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 300 <= room_number <= 343:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 3 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor3/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 344 <= room_number <= 360:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –¢–æ–ª–µ –ë–∏, 3 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor3/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 361 <= room_number <= 388:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 3 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor3/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 400 <= room_number <= 416:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 4 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor4/PF.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 419 <= room_number <= 438:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –ë–∏, 4 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor4/KB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 444 <= room_number <= 461:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 4 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor4/ABL.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True
        elif 462 <= room_number <= 476 or 417 <= room_number <= 418:
            await bot.send_message(
                message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –¢–æ–ª–µ –ë–∏, 4 —ç—Ç–∞–∂."
            )
            map_path = "./map/floor4/TB.png"
            with open(map_path, "rb") as photo:
                await bot.send_photo(message.from_user.id, photo)
            found = True

    if message.text.lower() in [
        "—Ö–∞–ª—ã–∫",
        "—Ö–∞–ª—ã–∫ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
        "–∑–µ–ª–µ–Ω—ã–π –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
        "halyk co-working",
    ]:
        await bot.send_message(
            message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 1 —ç—Ç–∞–∂."
        )
        map_path = "./map/floor1/KB.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() in [
        "–≥–µ–π–º–¥–µ–≤",
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –Ω–∞ 2 —ç—Ç–∞–∂–µ",
        "game dev",
        "gamedev",
        "726",
    ]:
        await bot.send_message(
            message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ö–∞–∑—ã–±–µ–∫ –±–∏, 2 —ç—Ç–∞–∂–µ."
        )
        map_path = "./map/floor2/KB.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() == "—Å—Ç–æ–ª–æ–≤–∫–∞":
        await bot.send_message(
            message.from_user.id, "–°—Ç–æ–ª–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 0 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –ë–∏ ."
        )
        map_path = "./map/floor1/Canteen.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() == "–∫—É—à–∞—Ç—å":
        await bot.send_message(
            message.from_user.id,
            "–°—Ç–æ–ª–æ–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 0 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –ë–∏. –ö—É–ø–∏—Ç—å –ø–µ—Ä–µ–∫—É—Å –Ω–∞ 0, 1, 3 —ç—Ç–∞–∂–µ –¢–æ–ª–µ –±–∏ —Ç–∞–∫ –∂–µ –Ω–∞ 1 —ç—Ç–∞–∂–µ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞. –ï—â–µ —Ä—è–¥–æ–º —Å —É–Ω–∏–≤–µ—Ä–æ–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–∫—É—à–∞—Ç—å.",
            reply_markup=main_keyboard,
        )
        found = True

    elif message.text.lower() == "—É—á–∏—Ç—å—Å—è":
        await bot.send_message(
            message.from_user.id,
            "–ü–æ–∫–∞ —è –Ω–µ –∑–Ω–∞—é –≥–¥–µ –º–æ–∂–Ω–æ —É—á–∏—Ç—å—Å—è",
            reply_markup=main_keyboard,
        )
        found = True
    elif message.text.lower() in [
        "–æ—Ä",
        "–æ—Ñ–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "office registration",
        "or",
    ]:
        await bot.send_message(
            message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ü–∞–Ω—Ñ–∏–ª–æ–≤–∞, 2 —ç—Ç–∞–∂–µ."
        )
        map_path = "./map/floor2/OR.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True
    elif message.text.lower() in [
        "–¥–µ–∫–∞–Ω–∞—Ç —Ñ–∏—Ç",
        "–¥–µ–∫–∞–Ω–∞—Ç —à–∏—Ç–∏–∏",
        "dean site",
        "site",
        "—à–∏—Ç–∏–∏",
        "—Ñ–∏—Ç",
    ]:
        await bot.send_message(
            message.from_user.id, "–≠—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ê–±—ã–ª–∞–π—Ö–∞–Ω–∞, 2 —ç—Ç–∞–∂–µ."
        )
        map_path = "./map/floor2/DCSITE.png"
        with open(map_path, "rb") as photo:
            await bot.send_photo(message.from_user.id, photo)
        found = True

    if not found:
        await bot.send_message(
            message.from_user.id,
            "–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        )

    # Reset the user state
    USER_STATES[message.from_user.id] = None


chatgpt_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
chatgpt_keyboard.row("–ù–∞–∑–∞–¥")


@dp.message_handler(lambda message: message.text == "ChatGPTü§ñ")
async def handle_chatgpt(message: types.Message):
    await bot.send_message(
        message.from_user.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=chatgpt_keyboard
    )
    USER_STATES[message.from_user.id] = "waiting_for_openai_question"


@dp.message_handler(
    lambda message: USER_STATES.get(message.from_user.id)
    == "waiting_for_openai_question"
)
async def handle_openai_question(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ—à—É –æ–∂–∏–¥–∞–π—Ç–µ —ç—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è",
    )
    response = await ask_openai(message.text)
    await bot.send_message(message.from_user.id, response)


@dp.message_handler(
    lambda message: message.text == "–ù–∞–∑–∞–¥"
    and USER_STATES.get(message.from_user.id) == "waiting_for_openai_question"
)
async def handle_back_from_chatgpt(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.",
        reply_markup=main_keyboard,  # 'keyboard' —ç—Ç–æ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    USER_STATES[message.from_user.id] = None


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
